name: Analysis
on:
  push:
    branches:
      - master
      - v*
  pull_request:
    types:
      - opened
      - synchronize

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  code-coverage:
    name: Code Coverage
    runs-on: ubuntu-20.04
    container: debian:bullseye-slim
    strategy:
      fail-fast: false
    env:
      BUILD_DIR: build
      CC: gcc-10
      CXX: g++-10
      CMAKE_GENERATOR: Ninja
      CMAKE_MAKE_PROGRAM: ninja
      DEBIAN_FRONTEND: noninteractive
    steps:
      - name: Install Dependencies
        run: |
          apt-get update
          apt-get -y install \
            apt-transport-https \
            build-essential \
            ca-certificates \
            curl \
            flatbuffers-compiler-dev \
            g++-10 \
            gcc-10 \
            git \
            gnupg2 gnupg-agent \
            jq \
            lcov \
            libasio-dev \
            libbroker-dev \
            libcaf-dev \
            libcaf-dev \
            libflatbuffers-dev \
            libfmt-dev \
            libpcap-dev tcpdump \
            librestinio-dev \
            libsimdjson-dev \
            libspdlog-dev \
            libssl-dev \
            libunwind-dev \
            libyaml-cpp-dev \
            libxxhash-dev \
            lsb-release \
            ninja-build \
            pandoc \
            pkg-config \
            python3-dev \
            python3-pip \
            python3-venv \
            software-properties-common \
            wget
          # Apache Arrow (c.f. https://arrow.apache.org/install/)
          wget "https://apache.jfrog.io/artifactory/arrow/$(lsb_release --id --short | tr 'A-Z' 'a-z')/apache-arrow-apt-source-latest-$(lsb_release --codename --short).deb" && \
          apt-get -y install ./apache-arrow-apt-source-latest-$(lsb_release --codename --short).deb && \
          apt-get update
          apt-get -y install libarrow-dev=10.0.0-1 libparquet-dev=10.0.0-1
          # Install CMake from pip -- we need at least 3.17 in CI for CCache
          python3 -m pip install --upgrade pip
          python3 -m pip install --upgrade cmake
          cmake --version
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Fetch Submodules and Tags
        run: |
          auth_header="$(git config --local --get http.https://github.com/.extraheader)"
          git submodule sync --recursive
          git -c "http.extraheader=$auth_header" -c protocol.version=2 submodule update --init --force --recursive
          git fetch origin +refs/tags/*:refs/tags/*
      - name: Configure
        run: |
          python3 --version
          python3 -m pip --version
          "$CC" --version
          "$CXX" --version
          # Setting different values for CMAKE_INSTALL_PREFIX and
          # CPACK_PACKAGING_INSTALL_PREFIX is currently not supported
          # and causes a warning. We accept this drawback because the package
          # we generate here is built specifically as input for the plugin CI
          # jobs and not suitable for general use.
          cmake -B "$BUILD_DIR" \
            -DCMAKE_BUILD_TYPE:STRING=Debug \
            -DCMAKE_INSTALL_PREFIX:STRING="${PWD}/opt/vast" \
            -DCPACK_GENERATOR:STRING=TGZ \
            -DVAST_ENABLE_BUNDLED_CAF:BOOL=OFF \
            -DVAST_ENABLE_CODE_COVERAGE:BOOL=ON \
            -DVAST_ENABLE_DSCAT:BOOL=ON \
            -DVAST_ENABLE_LSVAST:BOOL=ON \
            -DVAST_ENABLE_VAST_REGENERATE:BOOL=ON \
            -DVAST_PLUGINS:STRING='plugins/*' \
            -DVAST_UNIT_TEST_TIMEOUT=180
      - name: Compile All Targets
        run: |
          cmake --build "$BUILD_DIR" --target all --parallel --verbose
      - name: Generate Code Coverage
        run: |
          cmake --build "$BUILD_DIR" --target ccov > all-tests.log || exit 0
      - name: Upload Code Coverage Logs
        uses: actions/upload-artifact@v3
        with:
          name: code-coverage-logs
          path: all-tests.log
          if-no-files-found: error
      - name: Upload Code Coverage Report
        uses: actions/upload-artifact@v3
        with:
          name: code-coverage-report
          path: ${{ env.BUILD_DIR }}/ccov
          if-no-files-found: error
      - name: Upload to codecov.io
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.VAST_CODECOV_TOKEN }}
          files: ${{ env.BUILD_DIR }}/ccov/all-tests.info
