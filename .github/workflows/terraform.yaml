name: "Terraform"
on: workflow_dispatch

# This CI configuration has multiple dependencies:
# - You need an AWS account with a user having sufficient IAM access to run the
#   Terraform scripts and other CLI commands.
# - AWS credentials should be set in the Github repository secrets as
#   AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY. They should have sufficient IAM
#   priviledges to run Fargate tasks and Lambda functions.
# - You need to choose an AWS region and a VPC within that region. These should
#   be configured in the repository secrets as AWS_REGION and PEERED_VPC_ID.
# - The VAST deployment creates a new VPC. Its ip range should not overlap an
#   existing one in your account. Configure its CIDR in the repository secrets
#   as VAST_CIDR (for example 172.30.0.0/16).
# - The CI run uses Terraform Cloud to store the state. In Github Action
#   secrets, set TF_ORGANIZATION with your Terraform Cloud organizations name
#   and TF_API_TOKEN with a Terraform Cloud API key (for instance a user token).

# Notes:
# - If this workflow is executed multiple times at in parallel, the Terraform
#   state will be protected against inconsistencies by the lock provided by
#   Terraform Cloud but the other tests will result in undefined behavior.
# - If Terraform fails or is interrupted during deployment or destruction, the
#   state might end up locked and subsequent runs will fail. In this case the
#   state first needs to be unlocked, for instance from the Terraform Cloud UI.
# - You can optionally set a different prefix for the Terraform Cloud workspace
#   names using the TF_WORKSPACE_PREFIX secret (default is "gh-act-")

# Set these secrets to configure the CI run
env:
  VAST_PEERED_VPC_ID: "${{ secrets.VAST_PEERED_VPC_ID }}"
  VAST_CIDR: "${{ secrets.VAST_CIDR }}"
  VAST_AWS_REGION: "${{ secrets.VAST_AWS_REGION }}"
  TF_ORGANIZATION: "${{ secrets.TF_ORGANIZATION }}"
  TF_WORKSPACE_PREFIX: "${{ secrets.TF_WORKSPACE_PREFIX  || 'gh-act-' }}"
  TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
  TF_STATE_BACKEND: "cloud"
  AWS_ACCESS_KEY_ID: "${{ secrets.AWS_ACCESS_KEY_ID }}"
  AWS_SECRET_ACCESS_KEY: "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
  VASTCLOUD_NO_PTY: 1
  VASTCLOUD_TRACE: 1

jobs:
  vast_init:
    name: VAST Terraform init
    runs-on: ubuntu-20.04
    defaults:
      run:
        working-directory: ./cloud/aws
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Init on empty state
        run: ./vast-cloud init
        
      - name: Init clean
        run: ./vast-cloud init --clean

  vast_on_aws:
    name: VAST on AWS
    runs-on: ubuntu-20.04
    defaults:
      run:
        working-directory: ./cloud/aws
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Secret hashes
        run: |
          echo -n $VAST_PEERED_VPC_ID | md5sum
          echo -n $VAST_CIDR | md5sum
          echo -n $VAST_AWS_REGION | md5sum
          echo -n $TF_ORGANIZATION | md5sum
          echo -n $TF_WORKSPACE_PREFIX | md5sum
          echo -n $TF_API_TOKEN | md5sum
          echo -n $AWS_ACCESS_KEY_ID | md5sum
          echo -n $AWS_SECRET_ACCESS_KEY | md5sum

      - name: Configure Terraform Cloud
        run: ./vast-cloud tfcloud.config --auto

      - name: Deploy
        run: ./vast-cloud deploy --auto-approve

      - name: Deploy bucket
        run: ./vast-cloud workbucket.deploy --auto-approve

      - name: Run test playbook
        run: |
          ./vast-cloud tests.run

      - name: Init clean
        run: ./vast-cloud init --clean

      - name: Run test playbook after init
        run: |
          ./vast-cloud tests.run

      - name: Destroy
        continue-on-error: true
        id: destroy
        if: always()
        run: ./vast-cloud destroy --auto-approve

      - name: Retry destroy
        if: steps.destroy.outcome=='failure'
        run: |
          echo "Destroy sometimes fails for an unexplained reason."
          echo "Retrying after a few minutes usually works."
          sleep 300
          ./vast-cloud destroy --auto-approve
