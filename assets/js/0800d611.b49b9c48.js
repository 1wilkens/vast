"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2384],{86457:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>d,contentTitle:()=>o,default:()=>g,frontMatter:()=>r,metadata:()=>u,toc:()=>i});var n=t(87462),s=(t(67294),t(3905));t(61839);const r={},o="Query Language",u={unversionedId:"understand-vast/query-language/README",id:"understand-vast/query-language/README",title:"Query Language",description:"VAST query language (or VASTQL) allows for flexible extraction of events. It",source:"@site/docs/understand-vast/query-language/README.md",sourceDirName:"understand-vast/query-language",slug:"/understand-vast/query-language/",permalink:"/docs/understand-vast/query-language/",draft:!1,editUrl:"https://github.com/tenzir/vast/tree/master/web/docs/understand-vast/query-language/README.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Taxonomies",permalink:"/docs/understand-vast/data-model/taxonomies"},next:{title:"Expressions",permalink:"/docs/understand-vast/query-language/expressions"}},d={},i=[{value:"Language Evolution",id:"language-evolution",level:2}],l={toc:i};function g(e){let{components:a,...r}=e;return(0,s.kt)("wrapper",(0,n.Z)({},l,r,{components:a,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"query-language"},"Query Language"),(0,s.kt)("p",null,"VAST query language (or VASTQL) allows for flexible extraction of events. It\nis currently limited to the ",(0,s.kt)("a",{parentName:"p",href:"query-language/expressions"},"expression language")," to\nfilter a subset of data."),(0,s.kt)("h2",{id:"language-evolution"},"Language Evolution"),(0,s.kt)("p",null,"Moving forward, we plan to go beyond pure filter and add a pipeline-style\ndataflow processing engine. This engine exists partially today to\n",(0,s.kt)("a",{parentName:"p",href:"/docs/use-vast/transform"},"transform")," data, but needs further work to be\navailable for user queries."),(0,s.kt)("p",null,"The basic idea is that a query consists of two connected pieces: a ",(0,s.kt)("em",{parentName:"p"},"dataset")," to\nrepresent a data source and a ",(0,s.kt)("em",{parentName:"p"},"pipeline")," as a squence of operators to process\nthe data."),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Query Language",src:t(43231).Z+"#gh-light-mode-only",width:"1258",height:"260"}),"\n",(0,s.kt)("img",{alt:"Query Language",src:t(94919).Z+"#gh-dark-mode-only",width:"1258",height:"260"})),(0,s.kt)("p",null," To date, a VAST expression takes the role of a dataset and the pipeline is a\ntransformation. VAST implements a few operators as custom commands, such as\n",(0,s.kt)("inlineCode",{parentName:"p"},"pivot")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"explore"),". Stay tuned."))}g.isMDXComponent=!0},94919:(e,a,t)=>{t.d(a,{Z:()=>n});const n=t.p+"assets/images/query-language.dark-d71a0a71db8879757bfdaa7391801103.png"},43231:(e,a,t)=>{t.d(a,{Z:()=>n});const n=t.p+"assets/images/query-language.light-c276650944e817ebe2dd109bf555d744.png"}}]);