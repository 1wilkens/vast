"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[313],{29896:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>l});var a=n(83117),r=(n(67294),n(3905));const i={title:"VAST v2.2",description:"Pipelines",authors:"lava",date:new Date("2022-08-05T00:00:00.000Z"),tags:["release","summarize","pipelines"]},s=void 0,o={permalink:"/blog/vast-v2.2",source:"@site/blog/vast-v2.2/index.md",title:"VAST v2.2",description:"Pipelines",date:"2022-08-05T00:00:00.000Z",formattedDate:"August 5, 2022",tags:[{label:"release",permalink:"/blog/tags/release"},{label:"summarize",permalink:"/blog/tags/summarize"},{label:"pipelines",permalink:"/blog/tags/pipelines"}],readingTime:2.145,hasTruncateMarker:!0,authors:[{name:"Benno Evers",title:"Principal Engineer",url:"https://github.com/lava",email:"benno@tenzir.com",imageURL:"https://github.com/lava.png",key:"lava"}],frontMatter:{title:"VAST v2.2",description:"Pipelines",authors:"lava",date:"2022-08-05T00:00:00.000Z",tags:["release","summarize","pipelines"]},prevItem:{title:"Richer Typing in Sigma",permalink:"/blog/richer-typing-in-sigma"},nextItem:{title:"VAST v2.1",permalink:"/blog/vast-v2.1"}},p={authorsImageUrls:[void 0]},l=[{value:"Transforms are now Pipelines",id:"transforms-are-now-pipelines",level:2},{value:"Summarization Improvements",id:"summarization-improvements",level:2}],m={toc:l};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"We released ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/tenzir/vast/releases/tag/v2.2.0"},"VAST v2.2")," \ud83d\ude4c! Transforms now have a new name:\n",(0,r.kt)("a",{parentName:"p",href:"/blog/vast-v2.2#transforms-are-now-pipelines"},"pipelines"),". The ",(0,r.kt)("a",{parentName:"p",href:"/blog/vast-v2.2#summarization-improvements"},"summarize\noperator")," also underwent a facelift,\nmaking aggregation functions pluggable and allowing for assigning names to\noutput fields."),(0,r.kt)("h2",{id:"transforms-are-now-pipelines"},"Transforms are now Pipelines"),(0,r.kt)("p",null,"After carefully reconsidering our naming decisions related to query execution\nand data transformation, we came up with a naming convention that does a better\njob in capturing the underlying concepts."),(0,r.kt)("p",null,"Most notably, we renamed ",(0,r.kt)("em",{parentName:"p"},"transforms")," to ",(0,r.kt)("em",{parentName:"p"},"pipelines"),". A transform ",(0,r.kt)("em",{parentName:"p"},"step")," is now a\npipeline ",(0,r.kt)("em",{parentName:"p"},"operator"),". This nomenclature is much more familiar to users coming\nfrom dataflow and collection-based query engines. The implementation underneath\nhasn't changed. As in the ",(0,r.kt)("a",{parentName:"p",href:"https://paperhub.s3.amazonaws.com/dace52a42c07f7f8348b08dc2b186061.pdf"},"Volcano model"),", data still flows through\noperators, each of which consumes input from upstream operators and produces\noutput for downstream operators. What we term a pipeline is the sequence of such\nchained operators."),(0,r.kt)("p",null,"While pipelines are not yet available at the query layer, they soon will be.\nUntil then, you can deploy pipelines at load-time to ",(0,r.kt)("a",{parentName:"p",href:"/docs/use-vast/transform"},"transform data in motion\nor data at rest"),"."),(0,r.kt)("p",null,"From a user perspective, the configuration keys associated with transforms have\nchanged. Here's the updated example from our previous ",(0,r.kt)("a",{parentName:"p",href:"/blog/vast-v1.0"},"VAST v1.0 release\nblog"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'vast:\n  # Specify and name our pipelines, each of which are a list of configured\n  # pipeline operators. Pipeline operators are plugins, enabling users to \n  # write complex transformations in native code using C++ and Apache Arrow.\n  pipelines:\n     # Prevent events with certain strings to be exported, e.g., \n     # "tenzir" or "secret-username".\n     remove-events-with-secrets:\n       - select:\n           expression: \':string !in ["tenzir", "secret-username"]\'\n\n  # Specify whether to trigger each pipeline at server- or client-side, on\n  # `import` or `export`, and restrict them to a list of event types.\n  pipeline-triggers:\n    export:\n      # Apply the remove-events-with-secrets transformation server-side on\n      # export to the suricata.dns and suricata.http event types.\n      - pipeline: remove-events-with-secrets\n        location: server\n        events:\n          - suricata.dns\n          - suricata.http\n')),(0,r.kt)("h2",{id:"summarization-improvements"},"Summarization Improvements"),(0,r.kt)("p",null,"In line with the above nomenclature changes, we've improved the behavior of the\n",(0,r.kt)("a",{parentName:"p",href:"/docs/understand-vast/query-language/operators/summarize"},(0,r.kt)("inlineCode",{parentName:"a"},"summarize"))," operator. It is now possible to specify an explicit\nname for the output fields. This is helpful when the downstream processing needs\na predictable schema. Previously, VAST took simply the name of the input field.\nThe syntax was as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"summarize:\n  group-by:\n    - ...\n  aggregate:\n    min:\n      - ts # implied name for aggregate field\n")),(0,r.kt)("p",null,"We now switched the syntax such that the new field name is at the beginning:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"summarize:\n  group-by:\n    - ...\n  aggregate:\n    ts_min: # explicit name for aggregate field\n      min: ts\n")),(0,r.kt)("p",null,"In SQL, this would be the ",(0,r.kt)("inlineCode",{parentName:"p"},"AS")," token: ",(0,r.kt)("inlineCode",{parentName:"p"},"SELECT min(ts) AS min_ts"),"."))}u.isMDXComponent=!0}}]);