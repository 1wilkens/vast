"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1196],{3905:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>m});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),c=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},l=function(e){var t=c(e.components);return n.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=c(r),m=a,f=d["".concat(p,".").concat(m)]||d[m]||u[m]||o;return r?n.createElement(f,i(i({ref:t},l),{},{components:r})):n.createElement(f,i({ref:t},l))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=d;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},6866:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var n=r(87462),a=(r(67294),r(3905));const o={description:"Columnar format for analytics workloads"},i="Arrow",s={unversionedId:"understand/formats/arrow",id:"understand/formats/arrow",title:"Arrow",description:"Columnar format for analytics workloads",source:"@site/docs/understand/formats/arrow.md",sourceDirName:"understand/formats",slug:"/understand/formats/arrow",permalink:"/docs/understand/formats/arrow",draft:!1,editUrl:"https://github.com/tenzir/vast/tree/master/web/docs/understand/formats/arrow.md",tags:[],version:"current",frontMatter:{description:"Columnar format for analytics workloads"},sidebar:"docsSidebar",previous:{title:"Formats",permalink:"/docs/understand/formats/"},next:{title:"ASCII",permalink:"/docs/understand/formats/ascii"}},p={},c=[{value:"Input",id:"input",level:2},{value:"Output",id:"output",level:2}],l={toc:c};function u(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"arrow"},"Arrow"),(0,a.kt)("p",null,"VAST supports reading and writing data in the binary ",(0,a.kt)("a",{parentName:"p",href:"https://arrow.apache.org/docs/format/Columnar.html#serialization-and-interprocess-communication-ipc"},(0,a.kt)("inlineCode",{parentName:"a"},"Arrow IPC")),"\ncolumnar format, suitable for efficient handling of large data sets. For\nexample, VAST's ",(0,a.kt)("a",{parentName:"p",href:"/docs/use/integrate/python"},"Python bindings")," use this format\nfor high-bandwidth data exchange."),(0,a.kt)("admonition",{title:"Extension Types",type:"note"},(0,a.kt)("p",{parentName:"admonition"},"VAST translates its own types into Arrow ",(0,a.kt)("a",{parentName:"p",href:"https://arrow.apache.org/docs/format/Columnar.html#extension-types"},"extension\ntypes"),"\nto properly describe domain-specific concepts like IP addresses or subnets.\nVAST's ",(0,a.kt)("a",{parentName:"p",href:"/docs/use/integrate/python"},"Python bindings")," come with the required tooling, so you can\nwork with native types instead of relying on generic string or number\nrepresentations.")),(0,a.kt)("h2",{id:"input"},"Input"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"import arrow")," command imports ",(0,a.kt)("a",{parentName:"p",href:"https://arrow.apache.org/docs/format/Columnar.html#serialization-and-interprocess-communication-ipc"},(0,a.kt)("inlineCode",{parentName:"a"},"Arrow IPC"))," data. Since this\nformat carries the schema alongside the data, ",(0,a.kt)("inlineCode",{parentName:"p"},"import arrow")," is self-contained\nand does not require an additional schema."),(0,a.kt)("p",null,"To demonstrate how the ",(0,a.kt)("inlineCode",{parentName:"p"},"arrow")," format works, consider this snippet of Python\nthat generates an Arrow IPC stream to stdout:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python",metastring:"title=generate.py",title:"generate.py"},"import pyarrow as pa\nimport sys\n\ndata = [\n    pa.array([1, 2, 3, 4]),\n    pa.array(['foo', 'bar', 'baz', None]),\n    pa.array([True, None, False, True])\n]\n\nbatch = pa.record_batch(data, names=['a', 'b', 'c'])\n\nsink = pa.output_stream(sys.stdout.buffer)\nwith pa.ipc.new_stream(sink, batch.schema) as writer:\n   for i in range(5):\n      writer.write_batch(batch)\n")),(0,a.kt)("p",null,"You can import the output of this script into VAST as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"python generate.py | vast import arrow\n")),(0,a.kt)("admonition",{title:"Limited Compatibility",type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"VAST can currently only import Arrow data that it also exported. We are working\non support for processing arbitrary Arrow data.")),(0,a.kt)("h2",{id:"output"},"Output"),(0,a.kt)("p",null,"Since Arrow IPC is self-contained and includes the full schema, you can use it\nto transfer data between VAST nodes, even if the target node is not aware of the\nunderlying schema."),(0,a.kt)("p",null,"To export a query result as an Arrow IPC stream, use ",(0,a.kt)("inlineCode",{parentName:"p"},"export arrow"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"vast export arrow '1.2.3.4 || #type == \"suricata.alert\"'\n")),(0,a.kt)("p",null,"Note that this generates binary output. Make sure you pipe the output to a tool\nthat reads an Arrow IPC stream on stdin."),(0,a.kt)("p",null,"VAST's ",(0,a.kt)("a",{parentName:"p",href:"/docs/use/integrate/python"},"Python bindings")," use this method to retrieve data from a\nVAST server."))}u.isMDXComponent=!0}}]);