"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7786],{32396:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>h,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>l});var n=a(83117),s=(a(67294),a(3905));const r={title:"Parquet & Feather: Enabling Open Investigations",authors:["mavam","dispanser"],date:new Date("2022-10-07T00:00:00.000Z"),tags:["arrow","parquet","feather"]},o=void 0,i={permalink:"/blog/parquet-and-feather-enabling-open-investigations",source:"@site/blog/parquet-and-feather-enabling-open-investigations/index.md",title:"Parquet & Feather: Enabling Open Investigations",description:"Apache Parquet is the common denominator for structured data at rest.",date:"2022-10-07T00:00:00.000Z",formattedDate:"October 7, 2022",tags:[{label:"arrow",permalink:"/blog/tags/arrow"},{label:"parquet",permalink:"/blog/tags/parquet"},{label:"feather",permalink:"/blog/tags/feather"}],readingTime:5.02,hasTruncateMarker:!0,authors:[{name:"Matthias Vallentin",title:"Co-Founder & CEO",url:"https://github.com/mavam",email:"matthias@tenzir.com",imageURL:"https://github.com/mavam.png",key:"mavam"},{name:"Thomas Peiselt",title:"Data Engineer",url:"https://github.com/dispanser",email:"thomas@tenzir.com",imageURL:"https://github.com/dispanser.png",key:"dispanser"}],frontMatter:{title:"Parquet & Feather: Enabling Open Investigations",authors:["mavam","dispanser"],date:"2022-10-07T00:00:00.000Z",tags:["arrow","parquet","feather"]},nextItem:{title:"A Git Retrospective",permalink:"/blog/a-git-retrospective"}},h={authorsImageUrls:[void 0,void 0]},l=[{value:"Why Parquet and Feather?",id:"why-parquet-and-feather",level:2},{value:"Parquet&#39;s Little Brother",id:"parquets-little-brother",level:2},{value:"Parquet and Feather in VAST",id:"parquet-and-feather-in-vast",level:2},{value:"Imbueing Domain Semantics",id:"imbueing-domain-semantics",level:2}],p={toc:l};function d(e){let{components:t,...r}=e;return(0,s.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://parquet.apache.org/"},"Apache Parquet")," is the common denominator for structured data at rest.\nThe data science ecosystem has long appreciated this. But infosec? Why should\nyou care about Parquet when building a threat detection and investigation\nplatform? In this blog post series we share our opinionated view on this\nquestion. In the next three blog posts, we"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"describe how VAST uses Parquet and its little brother ",(0,s.kt)("a",{parentName:"li",href:"https://arrow.apache.org/docs/python/feather.html"},"Feather")),(0,s.kt)("li",{parentName:"ol"},"benchmark the two formats against each other for typical workloads"),(0,s.kt)("li",{parentName:"ol"},"share our experience with all the engineering gotchas we encountered along\nthe way")),(0,s.kt)("h2",{id:"why-parquet-and-feather"},"Why Parquet and Feather?"),(0,s.kt)("p",null,"Parquet is the de-facto standard for storing structured data in a format\nconducive for analytics. Nearly all analytics engines support reading Parquet\nfiles to load a dataset in memory for subsequent analysis."),(0,s.kt)("p",null,"The data science community has long built on this foundation, but the majority\nof infosec tooling ",(0,s.kt)("a",{parentName:"p",href:"/docs/about/vision#the-soc-architecture-maze"},"does not build on an open\nfoundation"),". Too many\nproducts hide their data behind silos, either wrapped behind a SaaS with a thin\nAPI, or in a custom format that requires cumbersome ETL pipelines. Nearly all\nadvanced use cases require full access to the data. Especially when\nthe goal is developing realtime threat detection and response systems."),(0,s.kt)("p",null,'Security is a data problem. But how should we represent that data? This is where\nParquet enters the picture. As a vendor-agnostic storage format for structured\nand nested data, it decouples storage from analytics. This is where SIEM\nmonoliths fail: they offer a single black box that tightly couples data\nacquision and processing capabilities. Providing a thin "open" API is not really\nopen, as it prevents high-bandwidth data access that is needed for advanced\nanalytics workloads.'),(0,s.kt)("p",null,"Open storage prevents vendor-lock-in. When any tool can work with the data, you\nbuild a sustainable foundation for implementing future use cases. For example,\nwith Parquet's column encryption, you can offload fine-grained compliance use\ncases to a dedicated application. Want to try out a new analytics engine? Just\npoint it to the Parquet files."),(0,s.kt)("h2",{id:"parquets-little-brother"},"Parquet's Little Brother"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://arrow.apache.org/docs/python/feather.html"},"Feather"),' is Parquet\'s little brother. It emerged while building a\nproof of concept for "fast, language-agnostic data frame storage for Python\n(pandas) and R." The format is a thin layer on top of ',(0,s.kt)("a",{parentName:"p",href:"https://arrow.apache.org/docs/python/ipc.html#ipc"},"Arrow\nIPC"),", making it conducive for\nmemory mapping and zero-copy usage. On the spectrum of speed and\nspace-efficiency, think of it this way:"),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Parquet vs. Feather",src:a(81161).Z+"#gh-light-mode-only",width:"1255",height:"637"}),"\n",(0,s.kt)("img",{alt:"Parquet vs. Feather",src:a(89911).Z+"#gh-dark-mode-only",width:"1255",height:"637"})),(0,s.kt)("p",null,"Before Feather existed, VAST had its own storage format that was 95% like\nFeather, minus a thin framing. (We called it the ",(0,s.kt)("em",{parentName:"p"},"segment store"),".)"),(0,s.kt)("p",null,"Wait, but Feather is an in-memory format and Parquet an on-disk format. You\ncannot compare them! Fair point, but don't forget transparent Zstd compression.\nFor some schemas, we barely notice a difference (e.g., PCAP), whereas for others\nschemas, Parquet stores have less than 10% the size of Feather despite."),(0,s.kt)("p",null,"The next blog post goes into these details. For now, we want to stress that\nFeather is in fact a reasonable format for data at rest, even when looking at\nspace utilization alone."),(0,s.kt)("h2",{id:"parquet-and-feather-in-vast"},"Parquet and Feather in VAST"),(0,s.kt)("p",null,"VAST can store event data as Parquet or Feather. The unit of storage scaling is\na ",(0,s.kt)("em",{parentName:"p"},"partition"),". In Arrow terms, a partition is a persisted form of an ",(0,s.kt)("a",{parentName:"p",href:"https://arrow.apache.org/docs/python/data.html#tables"},"Arrow\nTable"),", i.e., a concatenation of ",(0,s.kt)("a",{parentName:"p",href:"https://arrow.apache.org/docs/python/data.html#record-batches"},"Record\nBatches"),". A partition has thus a fixed schema. VAST's ",(0,s.kt)("a",{parentName:"p",href:"/docs/understand/architecture/plugins#store"},"store\nplugin")," determines how a partition writes its buffered record\nbatches to disk. The diagram below illustrates the architecture:"),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Parquet Analytics",src:a(62283).Z+"#gh-light-mode-only",width:"2222",height:"1666"}),"\n",(0,s.kt)("img",{alt:"Parquet Analytics",src:a(5499).Z+"#gh-dark-mode-only",width:"2222",height:"1666"})),(0,s.kt)("p",null,"This architecture makes it easy to point an analytics application directly to\nthe store files, without the need for ETLing it into a dedicated warehouse, such\nas Spark or Hadoop."),(0,s.kt)("p",null,"The event data thrown at VAST has quite some variety of schemas. During\ningestion, VAST first demultiplexes the heterogeneous stream of events into\nmultiple homogenous streams, each of which has a unique schema. VAST buffers\nevents until the partition hits a pre-configured event limit (e.g., 1M) or until\na timeout occurs (e.g., 60m). Thereafter, VAST writes the partition in one shot\nand persists it."),(0,s.kt)("p",null,"The buffering provides optimal freshness of the data, as it enables queries run\non not-yet-persisted data. But it also sets an upper bound on the partition\nsize, given that it must fit in memory in its entirety. In the future, we plan\nto make this freshness trade-off explicit, making it possible to write out\nlarger-than-memory stores incrementally."),(0,s.kt)("h2",{id:"imbueing-domain-semantics"},"Imbueing Domain Semantics"),(0,s.kt)("p",null,"In a ",(0,s.kt)("a",{parentName:"p",href:"/blog/apache-arrow-as-platform-for-security-data-engineering"},"past blog")," we described how VAST uses Arrow's extensible\ntype system to add richer semantics to the data. This is how the value of VAST\ntranscends through the analytics stack. For example, VAST has native IP address\ntypes that you can show up in Python as ",(0,s.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/ipaddress.html"},"ipaddress")," instance. This\navoids friction in the data exchange process. Nobody wants to spend time\nconverting bytes or strings into the semantic objects that are ultimately need\nfor the analysis."),(0,s.kt)("p",null,"Here's how ",(0,s.kt)("a",{parentName:"p",href:"/docs/understand/data-model/type-system"},"VAST's type system")," looks\nlike:"),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Type System",src:a(97802).Z+"#gh-light-mode-only",width:"1480",height:"881"}),"\n",(0,s.kt)("img",{alt:"Type System",src:a(35255).Z+"#gh-dark-mode-only",width:"1480",height:"881"})),(0,s.kt)("p",null,"There exist two major classes of types: ",(0,s.kt)("em",{parentName:"p"},"basic"),", stateless types with a static\nstructure and a-priori known representation, and ",(0,s.kt)("em",{parentName:"p"},"complex"),", stateful types that\ncarry additional runtime information. We map this type system without\ninformation loss to Arrow:"),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Type System",src:a(25554).Z+"#gh-light-mode-only",width:"1562",height:"880"}),"\n",(0,s.kt)("img",{alt:"Type System",src:a(90151).Z+"#gh-dark-mode-only",width:"1562",height:"880"})),(0,s.kt)("p",null,"VAST converts enum, adress, and subnet types to\n",(0,s.kt)("a",{parentName:"p",href:"https://arrow.apache.org/docs/format/Columnar.html#extension-types"},"extension-types"),". All types are self-describing and part\nof the record batch meta data. Conversion is bi-directional. Both Parquet and\nFeather support fully nested structures in this type system. In theory. Our\nthird blog post in this series desribes the hurdles we had to overcome to make\nit work in practice."),(0,s.kt)("p",null,"In the next blog post, we perform a quantitive analysis of the two formats: how\nwell do they compress the original data? How much space do they take up in\nmemory? How much CPU time do I pay for how much space savings? In the meantime,\nif you want to learn more about Parquet, take a look at the ",(0,s.kt)("a",{parentName:"p",href:"https://arrow.apache.org/blog/2022/10/05/arrow-parquet-encoding-part-1/"},"blog post\nseries")," from the Arrow team."))}d.isMDXComponent=!0},5499:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/parquet-analytics.dark-4b411e1c136b37f650016d0264784f18.png"},62283:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/parquet-analytics.light-88e5228731d4212c798f5d29067aba32.png"},89911:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/parquet-vs-feather.dark-621c3e9318a436f1ad3a62532bee2c85.png"},81161:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/parquet-vs-feather.light-086e1e69a7925ccfb08200f2cd2ed54e.png"},90151:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/type-system-arrow.dark-cb064b1597c92be8cc8b6b1fecd68735.png"},25554:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/type-system-arrow.light-4318e010fb5f8cbedacc9a0763c40772.png"},35255:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/type-system-vast.dark-04b3677dd5ce4eab895b0c35b3bc427d.png"},97802:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/type-system-vast.light-995b5f4bd96e9b9a63318b45c4368bd7.png"}}]);