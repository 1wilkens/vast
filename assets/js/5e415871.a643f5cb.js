"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9739],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return h}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=c(n),h=r,m=u["".concat(l,".").concat(h)]||u[h]||p[h]||i;return n?a.createElement(m,o(o({ref:t},d),{},{components:n})):a.createElement(m,o({ref:t},d))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},99162:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return l},default:function(){return h},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return p}});var a=n(87462),r=n(63366),i=(n(67294),n(3905)),o=["components"],s={sidebar_position:0},l="Design Goals",c={unversionedId:"understand-vast/architecture/design-goals",id:"understand-vast/architecture/design-goals",title:"Design Goals",description:"In the following we articulate the design goals that we believe are vital to",source:"@site/docs/understand-vast/architecture/design-goals.md",sourceDirName:"understand-vast/architecture",slug:"/understand-vast/architecture/design-goals",permalink:"/docs/understand-vast/architecture/design-goals",draft:!1,editUrl:"https://github.com/tenzir/vast/tree/master/web/docs/understand-vast/architecture/design-goals.md",tags:[],version:"current",sidebarPosition:0,frontMatter:{sidebar_position:0},sidebar:"docsSidebar",previous:{title:"Understand VAST",permalink:"/docs/understand-vast/"},next:{title:"Actor Model",permalink:"/docs/understand-vast/architecture/actor-model"}},d={},p=[{value:"Data",id:"data",level:2},{value:"Open Data Access",id:"open-data-access",level:3},{value:"Rich and Strong Typing",id:"rich-and-strong-typing",level:3},{value:"Interoperability",id:"interoperability",level:3},{value:"System Architecture",id:"system-architecture",level:2},{value:"Adaptive Storage",id:"adaptive-storage",level:3},{value:"Natively Scalable Runtime",id:"natively-scalable-runtime",level:3},{value:"Separate Read and Write Path",id:"separate-read-and-write-path",level:3}],u={toc:p};function h(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"design-goals"},"Design Goals"),(0,i.kt)("p",null,"In the following we articulate the design goals that we believe are vital to\nconsider when building a security analytics platform. We separate the discussion\ninto data and architecture aspects."),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"HotSec '08 Workshop")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Many design goals are derivatives from the workshop paper in 2008 about\n",(0,i.kt)("a",{parentName:"p",href:"https://www.icir.org/mallman/papers/awareness-hotsec08.pdf"},"Principles for Developing Comprehensive Network Visibility")," by Mark\nAllman, Christian Kreibich, Vern Paxson, Robin Sommer, and Nicholas Weaver."))),(0,i.kt)("h2",{id:"data"},"Data"),(0,i.kt)("p",null,"Data is in the center of every analytical system. We formulate the following\ndata-related design goals."),(0,i.kt)("h3",{id:"open-data-access"},"Open Data Access"),(0,i.kt)("p",null,"In a world of black boxes exposed through a narrow API, many organizations have\nlimited access to their very own data. We want to build a system that gives\nthe user full control over their data, and freedom of choice for processing\ntools."),(0,i.kt)("p",null,"Importantly, data should not be encoded in a proprietary format. We do not want\nvendor lock-in. For a security analytics platform, using open protocols and\nstandards for data is fundamental to build trust so that users can build\napplications on top."),(0,i.kt)("h3",{id:"rich-and-strong-typing"},"Rich and Strong Typing"),(0,i.kt)("p",null,"To accommodate the idioms of the security domain, an analytics engine must be\nable to work with objects in the domain, without losing semantic information and\ndegenerating the representation to a generic data model. Security analysts are\nnot data engineers, and the goal should be avoiding context switches to\nlower-level implementation details when possible."),(0,i.kt)("p",null,"For example, the ",(0,i.kt)("a",{parentName:"p",href:"https://zeek.org"},"Zeek")," security monitor provides first-class\nsupport for domain-specific entities (e.g., native representation of IPv4 and\nIPv6 addresses) and type-specific operations (e.g., the ability to perform top-k\nprefix search to answer subnet membership queries). In addition, it must be\npossible to extend the pre-defined types with user-defined types to allow for\ncustomization or enhancement of domain semantics."),(0,i.kt)("p",null,"Keeping strong typing at the core of the system (as opposed to just at the data\nexchange boundary) is important to allow type-specific optimizations and push\nprocessing logic deeper into the system."),(0,i.kt)("h3",{id:"interoperability"},"Interoperability"),(0,i.kt)("p",null,"Having an open and flexible data model is not enough for building a platform.\nThe system must also come with extensible mechanisms to integrate with ",(0,i.kt)("em",{parentName:"p"},"other"),"\nsystems. In fact, a platform should come with first-class support for\nsimplifying integration with existing solutions."),(0,i.kt)("p",null,"For example, this can mean offering multiple access mechanisms to the same data\nthat other tools already use, such as Kafka or REST APIs."),(0,i.kt)("h2",{id:"system-architecture"},"System Architecture"),(0,i.kt)("p",null,"For building a system that can effectively support security domain experts, we\nformulate the following architecture-related design goals."),(0,i.kt)("h3",{id:"adaptive-storage"},"Adaptive Storage"),(0,i.kt)("p",null,"Security analytics operates on activity data, typically representing action of\nentities. There is no need to modify a witnessed action, as it would change the\nsemantics of what happened. Therefore we must treat the corresponding telemetry\nas immutable and store it an append-only manner."),(0,i.kt)("p",null,"But when storage is finite, old data must be deleted eventually. To maximize\nretention spans and enable longitudinal analytics, the engine should support\nmore than just deletion of old data, e.g., implement incremental aging by\nrolling up old data into more space-efficient representations. Operators should\nbe able to express retention policies declaratively, both for compliance use\ncases and to filter out less useful data."),(0,i.kt)("h3",{id:"natively-scalable-runtime"},"Natively Scalable Runtime"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/docs/about-vast/vision"},"We envision")," a distributed system that can perform the\nsame processing centralized in the cloud and deep at the edge. CPU, memory, and\nstorage have drastically different forms along this spectrum. Our goal is to\ndeploy the same engine across the entire spectrum, but with different pluggable\ncomponents and varying configurations that can adapt to the local environment.\nThat is, the system should scale vertically as well as horizontally."),(0,i.kt)("h3",{id:"separate-read-and-write-path"},"Separate Read and Write Path"),(0,i.kt)("p",null,"Security analytics involves processing of structured event data that represents\nactivity of endpoints, the network, and cloud resources. This generates a\nnever-ending torrent of telemetry at high event rates. Consequently, an\nanalytics engine must be able to operate under a saturated write path (ingest)."),(0,i.kt)("p",null,"The read path (queries) should not be affected by the write path and scale\nindependently, at least conceptually. In certain deployment environments this is\nnot avoidable, e.g., when the I/O path to persistent storage is shared, or\ncannot handle well simultaneous read/write operations."))}h.isMDXComponent=!0}}]);