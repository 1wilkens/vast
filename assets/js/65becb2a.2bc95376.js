"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4468],{52894:(e,t,a)=>{a.d(t,{ZP:()=>o});var n=a(83117),r=(a(67294),a(3905));const i={toc:[]};function o(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},i,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("admonition",{title:"Missing Documentation",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"This part of the documentation is not yet written. Stay tuned.")))}o.isMDXComponent=!0},39478:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>p,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var n=a(83117),r=(a(67294),a(3905)),i=(a(61839),a(52894));const o={},p="Query",s={unversionedId:"use-vast/query/README",id:"use-vast/query/README",title:"Query",description:"Choose an export format",source:"@site/docs/use-vast/query/README.md",sourceDirName:"use-vast/query",slug:"/use-vast/query/",permalink:"/docs/use-vast/query/",draft:!1,editUrl:"https://github.com/tenzir/vast/tree/master/web/docs/use-vast/query/README.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Ingest",permalink:"/docs/use-vast/ingest/"},next:{title:"Transform",permalink:"/docs/use-vast/transform/"}},l={},c=[{value:"Choose an export format",id:"choose-an-export-format",level:2},{value:"Zeek",id:"zeek",level:3},{value:"Broker",id:"broker",level:4},{value:"PCAP",id:"pcap",level:3},{value:"Extract packets in a specific time range",id:"extract-packets-in-a-specific-time-range",level:4},{value:"Extract packets matching IPs and ports",id:"extract-packets-matching-ips-and-ports",level:4},{value:"Extract packets matching VLAN IDs",id:"extract-packets-matching-vlan-ids",level:4},{value:"Extract packet matching a Community ID",id:"extract-packet-matching-a-community-id",level:4}],d={toc:c};function m(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"query"},"Query"),(0,r.kt)(i.ZP,{mdxType:"MissingDocumentation"}),(0,r.kt)("h2",{id:"choose-an-export-format"},"Choose an export format"),(0,r.kt)(i.ZP,{mdxType:"MissingDocumentation"}),(0,r.kt)("h3",{id:"zeek"},"Zeek"),(0,r.kt)(i.ZP,{mdxType:"MissingDocumentation"}),(0,r.kt)("h4",{id:"broker"},"Broker"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"broker")," export command sends query results to Zeek via the\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/zeek/broker"},"Broker")," communication library."),(0,r.kt)("p",null,"Broker provides a topic-based publish-subscribe communication layer and\nstandardized data model to interact with the Zeek ecosystem. Using the ",(0,r.kt)("inlineCode",{parentName:"p"},"broker"),"\nwriter, VAST can send query results to a Zeek instance. This allows you to write\nZeek scripts incorporate knowledge from the past that is no longer in Zeek\nmemory, e.g., when writing detectors for longitudinal attacks."),(0,r.kt)("p",null,"To export a query into a Zeek instance, run the ",(0,r.kt)("inlineCode",{parentName:"p"},"broker")," command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# Spawn a Broker endpoint, connect to localhost:9999/tcp, and publish\n# to the topic `vast/data` to send result events to Zeek.\nvast export broker <expression>\n")),(0,r.kt)("p",null,"To handle the data in Zeek, your script must write a handler for the following\nevent:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-zeek"},"event VAST::data(layout: string, data: any)\n  {\n  print layout, data; // dispatch\n  }\n")),(0,r.kt)("p",null,"The event argument ",(0,r.kt)("inlineCode",{parentName:"p"},"layout")," is the name of the event in the VAST table slice.\nThe ",(0,r.kt)("inlineCode",{parentName:"p"},"data")," argument a vector of Broker data values representing the event."),(0,r.kt)("p",null,"By default, VAST automatically publishes a Zeek event ",(0,r.kt)("inlineCode",{parentName:"p"},"VAST::data")," to the topic\n",(0,r.kt)("inlineCode",{parentName:"p"},"vast/data/"),". Use ",(0,r.kt)("inlineCode",{parentName:"p"},"--event")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"--topic")," to set these options to different\nvalues."),(0,r.kt)("h3",{id:"pcap"},"PCAP"),(0,r.kt)("p",null,"VAST supports ",(0,r.kt)("a",{parentName:"p",href:"/docs/use-vast/ingest#pcap"},"reading")," and writing\n",(0,r.kt)("a",{parentName:"p",href:"http://www.tcpdump.org"},"PCAP")," traces via ",(0,r.kt)("inlineCode",{parentName:"p"},"libpcap"),". On the write path, VAST can\nwrite packets to a trace file."),(0,r.kt)("admonition",{title:"Writing PCAP traces",type:"info"},(0,r.kt)("p",{parentName:"admonition"},"VAST can only write PCAP traces for events of type ",(0,r.kt)("inlineCode",{parentName:"p"},"pcap.packet"),". To avoid\nbogus trace file files, VAST automatically appends ",(0,r.kt)("inlineCode",{parentName:"p"},'#type == "pcap.packet"')," to\nevery query expression.")),(0,r.kt)("p",null,"Below are some examples queries the generate PCAP traces. In principle, you can\nalso use other output formats aside from ",(0,r.kt)("inlineCode",{parentName:"p"},"pcap"),". These will render the binary\nPCAP packet representation in the ",(0,r.kt)("inlineCode",{parentName:"p"},"payload")," field."),(0,r.kt)("h4",{id:"extract-packets-in-a-specific-time-range"},"Extract packets in a specific time range"),(0,r.kt)("p",null,"VAST uses the timestamp from the PCAP header to determine the event time for a\ngiven packet. To query all packets from the last 5 minutes, leverage the ",(0,r.kt)("inlineCode",{parentName:"p"},"time"),"\nfield:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"vast export pcap 'pcap.packet.time > 5 mins ago' | tcpdump -r - -nl\n")),(0,r.kt)("h4",{id:"extract-packets-matching-ips-and-ports"},"Extract packets matching IPs and ports"),(0,r.kt)("p",null,"To extract packets matching a combination of the connection 4-tuple, you can\nuse the ",(0,r.kt)("inlineCode",{parentName:"p"},"src"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"dst"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"sport"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"dport")," fields. For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"vast export pcap '6.6.6.6 && dport == 42000' | tcpdump -r - -nl\n")),(0,r.kt)("h4",{id:"extract-packets-matching-vlan-ids"},"Extract packets matching VLAN IDs"),(0,r.kt)("p",null,"VAST extracts outer and inner VLAN IDs from 802.1Q headers. You can query VLAN\nIDs using ",(0,r.kt)("inlineCode",{parentName:"p"},"vlan.outer")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"vlan.inner"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"vast export pcap 'vlan.outer > 0 || vlan.inner in [1, 2, 3]' | tcpdump -r - -nl\n")),(0,r.kt)("p",null,"Special IDs include ",(0,r.kt)("inlineCode",{parentName:"p"},"0x000")," (frame does not carry a VLAN ID) and ",(0,r.kt)("inlineCode",{parentName:"p"},"0xFFF"),"\n(reserved value; sometimes wildcard match). If you would like to check the\npresence of a header, check whether it null, e.g., ",(0,r.kt)("inlineCode",{parentName:"p"},"vlan.outer != nil"),"."),(0,r.kt)("h4",{id:"extract-packet-matching-a-community-id"},"Extract packet matching a Community ID"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"community_id")," field to query all packets belonging to a single flow\nidentified by a Community ID:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"vast export pcap 'community_id == \"1:wCb3OG7yAFWelaUydu0D+125CLM=\"' |\n  tcpdump -r - -nl\n")))}m.isMDXComponent=!0}}]);