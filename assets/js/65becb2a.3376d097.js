"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4468],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return d}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),u=c(n),d=r,k=u["".concat(s,".").concat(d)]||u[d]||m[d]||i;return n?a.createElement(k,o(o({ref:t},l),{},{components:n})):a.createElement(k,o({ref:t},l))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=u;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p.mdxType="string"==typeof e?e:r,o[1]=p;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},52894:function(e,t,n){n.d(t,{ZP:function(){return s}});var a=n(87462),r=n(63366),i=(n(67294),n(3905)),o=["components"],p={toc:[]};function s(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"Missing Documentation")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"This part of the documentation is not yet written. Stay tuned."))))}s.isMDXComponent=!0},39478:function(e,t,n){n.r(t),n.d(t,{assets:function(){return m},contentTitle:function(){return c},default:function(){return k},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return u}});var a=n(87462),r=n(63366),i=(n(67294),n(3905)),o=n(52894),p=["components"],s={},c="Query",l={unversionedId:"use-vast/query/README",id:"use-vast/query/README",title:"Query",description:"Choose an export format",source:"@site/docs/use-vast/query/README.md",sourceDirName:"use-vast/query",slug:"/use-vast/query/",permalink:"/docs/use-vast/query/",draft:!1,editUrl:"https://github.com/tenzir/vast/tree/master/docs/docs/use-vast/query/README.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Ingest",permalink:"/docs/use-vast/ingest/"},next:{title:"Transform",permalink:"/docs/use-vast/transform/"}},m={},u=[{value:"Choose an export format",id:"choose-an-export-format",level:2},{value:"Zeek",id:"zeek",level:3},{value:"Broker",id:"broker",level:4},{value:"PCAP",id:"pcap",level:3},{value:"Extract packets in a specific time range",id:"extract-packets-in-a-specific-time-range",level:4},{value:"Extract packets matching IPs and ports",id:"extract-packets-matching-ips-and-ports",level:4},{value:"Extract packets matching VLAN IDs",id:"extract-packets-matching-vlan-ids",level:4},{value:"Extract packet matching a Community ID",id:"extract-packet-matching-a-community-id",level:4}],d={toc:u};function k(e){var t=e.components,n=(0,r.Z)(e,p);return(0,i.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"query"},"Query"),(0,i.kt)(o.ZP,{mdxType:"MissingDocumentation"}),(0,i.kt)("h2",{id:"choose-an-export-format"},"Choose an export format"),(0,i.kt)(o.ZP,{mdxType:"MissingDocumentation"}),(0,i.kt)("h3",{id:"zeek"},"Zeek"),(0,i.kt)(o.ZP,{mdxType:"MissingDocumentation"}),(0,i.kt)("h4",{id:"broker"},"Broker"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"broker")," export command sends query results to Zeek via the\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/zeek/broker"},"Broker")," communication library."),(0,i.kt)("p",null,"Broker provides a topic-based publish-subscribe communication layer and\nstandardized data model to interact with the Zeek ecosystem. Using the ",(0,i.kt)("inlineCode",{parentName:"p"},"broker"),"\nwriter, VAST can send query results to a Zeek instance. This allows you to write\nZeek scripts incorporate knowledge from the past that is no longer in Zeek\nmemory, e.g., when writing detectors for longitudinal attacks."),(0,i.kt)("p",null,"To export a query into a Zeek instance, run the ",(0,i.kt)("inlineCode",{parentName:"p"},"broker")," command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"# Spawn a Broker endpoint, connect to localhost:9999/tcp, and publish\n# to the topic `vast/data` to send result events to Zeek.\nvast export broker <expression>\n")),(0,i.kt)("p",null,"To handle the data in Zeek, your script must write a handler for the following\nevent:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-zeek"},"event VAST::data(layout: string, data: any)\n  {\n  print layout, data; // dispatch\n  }\n")),(0,i.kt)("p",null,"The event argument ",(0,i.kt)("inlineCode",{parentName:"p"},"layout")," is the name of the event in the VAST table slice.\nThe ",(0,i.kt)("inlineCode",{parentName:"p"},"data")," argument a vector of Broker data values representing the event."),(0,i.kt)("p",null,"By default, VAST automatically publishes a Zeek event ",(0,i.kt)("inlineCode",{parentName:"p"},"VAST::data")," to the topic\n",(0,i.kt)("inlineCode",{parentName:"p"},"vast/data/"),". Use ",(0,i.kt)("inlineCode",{parentName:"p"},"--event")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"--topic")," to set these options to different\nvalues."),(0,i.kt)("h3",{id:"pcap"},"PCAP"),(0,i.kt)("p",null,"VAST supports ",(0,i.kt)("a",{parentName:"p",href:"/docs/use-vast/ingest#pcap"},"reading")," and writing\n",(0,i.kt)("a",{parentName:"p",href:"http://www.tcpdump.org"},"PCAP")," traces via ",(0,i.kt)("inlineCode",{parentName:"p"},"libpcap"),". On the write path, VAST can\nwrite packets to a trace file."),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"Writing PCAP traces")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"VAST can only write PCAP traces for events of type ",(0,i.kt)("inlineCode",{parentName:"p"},"pcap.packet"),". To avoid\nbogus trace file files, VAST automatically appends ",(0,i.kt)("inlineCode",{parentName:"p"},'#type == "pcap.packet"')," to\nevery query expression."))),(0,i.kt)("p",null,"Below are some examples queries the generate PCAP traces. In principle, you can\nalso use other output formats aside from ",(0,i.kt)("inlineCode",{parentName:"p"},"pcap"),". These will render the binary\nPCAP packet representation in the ",(0,i.kt)("inlineCode",{parentName:"p"},"payload")," field."),(0,i.kt)("h4",{id:"extract-packets-in-a-specific-time-range"},"Extract packets in a specific time range"),(0,i.kt)("p",null,"VAST uses the timestamp from the PCAP header to determine the event time for a\ngiven packet. To query all packets from the last 5 minutes, leverage the ",(0,i.kt)("inlineCode",{parentName:"p"},"time"),"\nfield:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"vast export pcap 'pcap.packet.time > 5 mins ago' | tcpdump -r - -nl\n")),(0,i.kt)("h4",{id:"extract-packets-matching-ips-and-ports"},"Extract packets matching IPs and ports"),(0,i.kt)("p",null,"To extract packets matching a combination of the connection 4-tuple, you can\nuse the ",(0,i.kt)("inlineCode",{parentName:"p"},"src"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"dst"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"sport"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"dport")," fields. For example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"vast export pcap '6.6.6.6 && dport == 42000' | tcpdump -r - -nl\n")),(0,i.kt)("h4",{id:"extract-packets-matching-vlan-ids"},"Extract packets matching VLAN IDs"),(0,i.kt)("p",null,"VAST extracts outer and inner VLAN IDs from 802.1Q headers. You can query VLAN\nIDs using ",(0,i.kt)("inlineCode",{parentName:"p"},"vlan.outer")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"vlan.inner"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"vast export pcap 'vlan.outer > 0 || vlan.inner in [1, 2, 3]' | tcpdump -r - -nl\n")),(0,i.kt)("p",null,"Special IDs include ",(0,i.kt)("inlineCode",{parentName:"p"},"0x000")," (frame does not carry a VLAN ID) and ",(0,i.kt)("inlineCode",{parentName:"p"},"0xFFF"),"\n(reserved value; sometimes wildcard match). If you would like to check the\npresence of a header, check whether it null, e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"vlan.outer != nil"),"."),(0,i.kt)("h4",{id:"extract-packet-matching-a-community-id"},"Extract packet matching a Community ID"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"community_id")," field to query all packets belonging to a single flow\nidentified by a Community ID:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"vast export pcap 'community_id == \"1:wCb3OG7yAFWelaUydu0D+125CLM=\"' |\n  tcpdump -r - -nl\n")))}k.isMDXComponent=!0}}]);