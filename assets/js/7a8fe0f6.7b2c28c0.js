"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[246],{3905:function(e,t,a){a.d(t,{Zo:function(){return p},kt:function(){return u}});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),c=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),h=c(a),u=r,m=h["".concat(l,".").concat(u)]||h[u]||d[u]||o;return a?n.createElement(m,i(i({ref:t},p),{},{components:a})):n.createElement(m,i({ref:t},p))}));function u(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var c=2;c<o;c++)i[c]=a[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},51440:function(e,t,a){a.r(t),a.d(t,{assets:function(){return p},contentTitle:function(){return l},default:function(){return u},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return d}});var n=a(87462),r=a(63366),o=(a(67294),a(3905)),i=["components"],s={description:"How VAST leverages Apache Arrow for Security Data Engineering",authors:"mavam",date:new Date("2022-06-17T00:00:00.000Z"),tags:["architecture","arrow","performance","query"]},l="Apache Arrow as Platform for Security Data Engineering",c={permalink:"/blog/apache-arrow-as-platform-for-security-data-engineering",source:"@site/blog/apache-arrow-as-platform-for-security-data-engineering/index.md",title:"Apache Arrow as Platform for Security Data Engineering",description:"How VAST leverages Apache Arrow for Security Data Engineering",date:"2022-06-17T00:00:00.000Z",formattedDate:"June 17, 2022",tags:[{label:"architecture",permalink:"/blog/tags/architecture"},{label:"arrow",permalink:"/blog/tags/arrow"},{label:"performance",permalink:"/blog/tags/performance"},{label:"query",permalink:"/blog/tags/query"}],readingTime:6.05,truncated:!0,authors:[{name:"Matthias Vallentin",title:"Co-Founder & CEO",url:"https://github.com/mavam",email:"matthias@tenzir.com",imageURL:"https://github.com/mavam.png",key:"mavam"}],frontMatter:{description:"How VAST leverages Apache Arrow for Security Data Engineering",authors:"mavam",date:"2022-06-17T00:00:00.000Z",tags:["architecture","arrow","performance","query"]},nextItem:{title:"VAST v2.0",permalink:"/blog/vast-v2.0"}},p={authorsImageUrls:[void 0]},d=[],h={toc:d};function u(e){var t=e.components,s=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,n.Z)({},h,s,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"VAST bets on ",(0,o.kt)("a",{parentName:"p",href:"https://arrow.apache.org"},"Apache Arrow"),' as the open interface to structured data. By\n"bet," we mean that VAST does not work without Arrow. And we are not alone.\nInflux\'s ',(0,o.kt)("a",{parentName:"p",href:"https://github.com/influxdata/influxdb_iox"},"IOx"),", DataDog's ",(0,o.kt)("a",{parentName:"p",href:"https://www.datadoghq.com/blog/engineering/introducing-husky/"},"Husky"),", Anyscale's ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/ray-project/ray"},"Ray"),",\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/tensorbase/tensorbase"},"TensorBase"),", and ",(0,o.kt)("a",{parentName:"p",href:"https://arrow.apache.org/powered_by/"},"others")," committed themselves to\nmaking Arrow a corner stone of their system architecture. For us, Arrow was not\nalways a required dependency. We shifted to a tighter integration over the years\nas the Arrow ecosystem matured. In this blog post we explain our journey of\nbecoming an Arrow-native engine."),(0,o.kt)("p",null,"Today, the need to bring advanced security analytics and data engineering\ntogether is stronger than ever, but there is a huge gap between the two fields.\nWe see Arrow as the vehicle to close this gap, allowing us developers to\npractice ",(0,o.kt)("em",{parentName:"p"},"security data engineering")," to make security analytics easy for users.\nThat is, the experience should allow experts to interact with the data in the\nsecurity domain, end-to-end without context switching. To achieve this, we began\nour journey with VAST by developing a data model for structured security\ntelemetry. Having worked for a decade with the ",(0,o.kt)("a",{parentName:"p",href:"https://zeek.org"},"Zeek")," (fka. Bro) network\nsecurity monitor, we understood the value of having first-class support for\ndomain-specific entities (e.g., native representation of IPv4 and IPv6\naddresses) and type-specific operations (e.g., the ability to perform top-k\nprefix search to answer subnet membership queries). In addition, the ability to\nembed domain semantics with user-defined types (e.g., IP addresses, subnets, and\nURLs) was central to expressing complex relationships to develop effective\nanalytical models. It was clear that we needed the domain model deep in the core\nof the system to successfully support security analytics."),(0,o.kt)("p",null,"After having identified the data model requirements, the question of\nrepresentation came next. At first, we unified the internal representation with\na row-oriented representation using ",(0,o.kt)("a",{parentName:"p",href:"https://msgpack.org/index.html"},"MsgPack"),", which comes with a\nmechanism for adding custom types. The assumption was that a row-based data\nrepresentation more closely matches typical event data (e.g., JSONL) and\ntherefore allows for much higher processing rates. Moreover, early use cases of\nVAST were limited to interactive, multi-dimensional search to extract a subset\nof ",(0,o.kt)("em",{parentName:"p"},"entire")," records, spread over a longitudinal archive of data. The\nrow-oriented encoding worked well for this."),(0,o.kt)("p",null,"But as security operations were maturing, requirements extended to analytical\nprocessing of structured data, making a columnar format increasingly beneficial.\nAfter having witnessed first-hand the early commitment of ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/ray-project/ray"},"Ray"),' to Arrow,\nwe started using Arrow as optional dependency as additional column-oriented\nencoding. We abstracted a batch of data encoding-independent behind a "table\nslice":'),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"MsgPack &amp; Arrow",src:a(67830).Z+"#gh-light-mode-only",width:"2000",height:"560"}),"\n",(0,o.kt)("img",{alt:"MsgPack &amp; Arrow",src:a(29477).Z+"#gh-dark-mode-only",width:"2000",height:"560"})),(0,o.kt)("p",null,"Hiding the concrete encoding behind a cell-based access interface worked for\nlow-volume use cases, but backfired as we scaled up and slowed us down\nsubstantially in development. We needed to make a choice. This is where timing\nwas right: our perception of the rapidly evolving Arrow ecosystem changed.\nArrow-based runtimes were mushrooming all over the place. Nowadays it requires\nonly a few lines of code to integrate Arrow data into the central logic of\napplications. We realized that the primary value proposition of Arrow is to\n",(0,o.kt)("em",{parentName:"p"},"make data interoperability easy"),"."),(0,o.kt)("p",null,"But data interoperability is only a sufficient condition for enabling\nsustainable security analytics. The differentiating value of a ",(0,o.kt)("em",{parentName:"p"},"security")," data\nplatform is support for the ",(0,o.kt)("em",{parentName:"p"},"security")," domain. This is where Arrow's ",(0,o.kt)("a",{parentName:"p",href:"https://arrow.apache.org/docs/format/Columnar.html#extension-types"},"extension\ntypes")," come into play. They add ",(0,o.kt)("em",{parentName:"p"},"semantics"),' to otherwise\ngeneric types, e.g., by telling the user "this is a transport-layer port" and\nnot just a 16-bit unsigned integer, or "this is a connection 4-tuple to\nrepresent a network flow" instead of "this is a record with 4 fields of type\nstring and unsigned integer". Extension types are composable and allow for\ncreating a rich typing layer with meaningful domain objects on top of a\nstandardized data representation. Since they are embedded in the data, they do\nnot have to be made available out-of-band when crossing the boundaries of\ndifferent tools. Now we have self-describing security data.'),(0,o.kt)("p",null,"Interoperability plus support for a domain-specific data model makes Arrow a\nsolid ",(0,o.kt)("em",{parentName:"p"},"data plane"),". It turns out that Arrow is much more than a standardized\ndata representation. Arrow also comes with bag of tools for working with the\nstandardized data. In the diagram below, we show the various Arrow pieces that\npower the architecture of VAST:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Arrow Data Plane",src:a(89457).Z+"#gh-light-mode-only",width:"1600",height:"1183"}),"\n",(0,o.kt)("img",{alt:"Arrow Data Plane",src:a(27409).Z+"#gh-dark-mode-only",width:"1600",height:"1183"})),(0,o.kt)("p",null,"In the center we have the Arrow data plane that powers other parts of the\nsystem. Green elements highlight Arrow building blocks that we use today, and\norange pieces elements we plan to use in the future. There are several aspects\nworth pointing out:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Unified Data Plane"),": When users ingest data into VAST, the\nparsing process converts the native data into Arrow. Similarly, a\nconversation boundary exists when data leaves the system, e.g., when a user\nwants a query result shown in JSON, CSV, or some custom format. Source and\nsink data formats are ",(0,o.kt)("a",{parentName:"p",href:"/docs/understand-vast/architecture/plugins"},"exchangeable\nplugins"),".")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Read/Write Path Separation"),": one design goal of VAST is a strict\nseparation of read and write path, in order to scale them independently. The\nwrite path follows a horizontally scalable architecture where builders (one per\nschema) turn the in-memory record batches into a persistent representation.\nVAST currently has support for Parquet and Feather.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Pluggable Query Engine"),": VAST has live/continuous queries that simply run\nover the stream of incoming data, and historical queries that operate on\npersistent data. The harboring execution engine is something we are about to\nmake pluggable. The reason is that VAST runs in extremely different\nenvironments, from cluster to edge. Query engines are usually optimized for a\nspecific use case, so why not use the best engine for the job at hand? Arrow\nmakes this possible. ",(0,o.kt)("a",{parentName:"p",href:"https://duckdb.org/"},"DuckDB")," and ",(0,o.kt)("a",{parentName:"p",href:"https://arrow.apache.org/datafusion/"},"DataFusion")," are great\nexample of embeddable query engines.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Unified Control Plane"),": to realize a pluggable query engine, we also need\na standardized control plane. This is where ",(0,o.kt)("a",{parentName:"p",href:"https://substrait.io/"},"Substrait")," and\n",(0,o.kt)("a",{parentName:"p",href:"https://arrow.apache.org/docs/format/Flight.html"},"Flight"),' come into play. Flight for communication and Substrait as\ncanonical query representation. We already experimented with Substrait,\nconverting VAST queries into a logical query plan. In fact, VAST has a "query\nlanguage" plugin to make it possible to translate security content. (For\nexample, our ',(0,o.kt)("a",{parentName:"p",href:"/docs/understand-vast/query-language/frontends/sigma"},"Sigma plugin")," translates ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/SigmaHQ/sigma"},"Sigma rules"),"\ninto VAST queries.) In short: Substrait is to the control plane what Arrow is\nto the data plane. Both are needed to modularize the concept of a query\nengine."))),(0,o.kt)("p",null,"Making our own query engine more suitable for analytical workloads has\nreceived less attention in the past, as we prioritized high-performance data\nacquisition, low-latency search, in-stream matching using ",(0,o.kt)("a",{parentName:"p",href:"https://arrow.apache.org/docs/cpp/compute.html"},"Compute"),",\nand expressiveness of the underlying domain data model. We did so because VAST\nmust run robustly in production on numerous appliances all over the world in a\nsecurity service provider setting, with confined processing and storage where\nefficiency is key."),(0,o.kt)("p",null,"Moving forward, we are excited to bring more analytical horse power to the\nsystem, while opening up the arena for third-party engines. With the bag of\ntools from the Arrow ecosystem, plus all other embeddable Arrow engines that are\nemerging, we have a modular architecture to can cover a very wide spectrum of\nuse cases."))}u.isMDXComponent=!0},27409:function(e,t,a){t.Z=a.p+"assets/images/arrow-data-plane.dark-1e38a9e966186c217a4a6963cae909ec.png"},89457:function(e,t,a){t.Z=a.p+"assets/images/arrow-data-plane.light-d64b2a653495efdbfb165bf6e993e87d.png"},29477:function(e,t,a){t.Z=a.p+"assets/images/msgpack-arrow.dark-d7a78dcf71589d187d68cbefcc9f2c72.png"},67830:function(e,t,a){t.Z=a.p+"assets/images/msgpack-arrow.light-d4fe0d3d4c5b14408fcf7b274a917c51.png"}}]);