"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2929],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return u}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,p=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),m=c(n),u=a,y=m["".concat(p,".").concat(u)]||m[u]||d[u]||s;return n?r.createElement(y,o(o({ref:t},l),{},{components:n})):r.createElement(y,o({ref:t},l))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,o=new Array(s);o[0]=m;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var c=2;c<s;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},42777:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return p},default:function(){return u},frontMatter:function(){return i},metadata:function(){return c},toc:function(){return d}});var r=n(87462),a=n(63366),s=(n(67294),n(3905)),o=["components"],i={sidebar_position:0},p="Type System",c={unversionedId:"understand-vast/data-model/type-system",id:"understand-vast/data-model/type-system",title:"Type System",description:"One design goal of VAST is",source:"@site/docs/understand-vast/data-model/type-system.md",sourceDirName:"understand-vast/data-model",slug:"/understand-vast/data-model/type-system",permalink:"/docs/understand-vast/data-model/type-system",draft:!1,editUrl:"https://github.com/tenzir/vast/tree/master/web/docs/understand-vast/data-model/type-system.md",tags:[],version:"current",sidebarPosition:0,frontMatter:{sidebar_position:0},sidebar:"docsSidebar",previous:{title:"Components",permalink:"/docs/understand-vast/architecture/components"},next:{title:"Concepts",permalink:"/docs/understand-vast/data-model/concepts"}},l={},d=[],m={toc:d};function u(e){var t=e.components,i=(0,a.Z)(e,o);return(0,s.kt)("wrapper",(0,r.Z)({},m,i,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"type-system"},"Type System"),(0,s.kt)("p",null,"One ",(0,s.kt)("a",{parentName:"p",href:"/docs/understand-vast/architecture/design-goals"},"design goal")," of VAST is\nbeing expressive enough to capture the semantics of the domain. This led us to\ndevelop a rich type system for structured security data, inspired by the data\nmodel of the ",(0,s.kt)("a",{parentName:"p",href:"https://zeek.org"},"Zeek")," network security monitor."),(0,s.kt)("p",null,"Every type has zero or more ",(0,s.kt)("strong",{parentName:"p"},"attributes"),", which are free-form key-value pairs\nto enrich types with custom semantics. Fundamentally, types support\n",(0,s.kt)("strong",{parentName:"p"},"aliasing"),", which means you can give an existing type a new name. All types,\nincluding aliases, share a global identifier namespace. In this namespace, type\nnames must be unique."),(0,s.kt)("p",null,"There exist two major classes of types:"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("strong",{parentName:"li"},"Basic"),": stateless types with a static structure and a-priori known representation"),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("strong",{parentName:"li"},"Complex"),": stateful types that carry additional runtime information")),(0,s.kt)("p",null,"The diagram below illustrates the type system:"),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Type System",src:n(97802).Z+"#gh-light-mode-only",width:"1480",height:"881"}),"\n",(0,s.kt)("img",{alt:"Type System",src:n(35255).Z+"#gh-dark-mode-only",width:"1480",height:"881"})),(0,s.kt)("p",null,"There exists a one-to-one mapping of VAST's type system to Arrow's type system\nto ensure that transferred data is self-describing:"),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Type System",src:n(25554).Z+"#gh-light-mode-only",width:"1562",height:"880"}),"\n",(0,s.kt)("img",{alt:"Type System",src:n(90151).Z+"#gh-dark-mode-only",width:"1562",height:"880"})),(0,s.kt)("p",null,"Note that VAST attaches attributes to a top-plevel type instance, where Arrow\nonly allows type meta data for record fields. VAST converts enum, adress, and\nsubnet types to ",(0,s.kt)("a",{parentName:"p",href:"https://arrow.apache.org/docs/format/Columnar.html#extension-types"},"extension-types"),"."),(0,s.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"More on Arrow & VAST")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"If you want to learn more about why VAST uses Apache Arrow, please read ",(0,s.kt)("a",{parentName:"p",href:"/blog/apache-arrow-as-platform-for-security-data-engineering"},"our\nblog post")," that\nexplains why we use Arrow as corner stone for data interoperability and\nrepresentation of the security domain model."))))}u.isMDXComponent=!0},90151:function(e,t,n){t.Z=n.p+"assets/images/type-system-arrow.dark-cb064b1597c92be8cc8b6b1fecd68735.png"},25554:function(e,t,n){t.Z=n.p+"assets/images/type-system-arrow.light-4318e010fb5f8cbedacc9a0763c40772.png"},35255:function(e,t,n){t.Z=n.p+"assets/images/type-system-vast.dark-04b3677dd5ce4eab895b0c35b3bc427d.png"},97802:function(e,t,n){t.Z=n.p+"assets/images/type-system-vast.light-995b5f4bd96e9b9a63318b45c4368bd7.png"}}]);