"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3353],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=l(n),m=o,h=d["".concat(c,".").concat(m)]||d[m]||u[m]||r;return n?a.createElement(h,i(i({ref:t},p),{},{components:n})):a.createElement(h,i({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var l=2;l<r;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},49616:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return u}});var a=n(87462),o=n(63366),r=(n(67294),n(3905)),i=["components"],s={},c="Components",l={unversionedId:"understand-vast/architecture/components",id:"understand-vast/architecture/components",title:"Components",description:"VAST uses the actor model to structure the application logic into",source:"@site/docs/understand-vast/architecture/components.md",sourceDirName:"understand-vast/architecture",slug:"/understand-vast/architecture/components",permalink:"/docs/understand-vast/architecture/components",draft:!1,editUrl:"https://github.com/tenzir/vast/tree/master/web/docs/understand-vast/architecture/components.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Plugins",permalink:"/docs/understand-vast/architecture/plugins"},next:{title:"Type System",permalink:"/docs/understand-vast/data-model/type-system"}},p={},u=[{value:"Singleton Components",id:"singleton-components",level:2},{value:"CATALOG",id:"catalog",level:3},{value:"SCHEDULER",id:"scheduler",level:3},{value:"Multi-instance Components",id:"multi-instance-components",level:2},{value:"LOADER",id:"loader",level:3},{value:"SOURCE",id:"source",level:3},{value:"PARTITION",id:"partition",level:3},{value:"QUERY",id:"query",level:3},{value:"SINK",id:"sink",level:3},{value:"DUMPER",id:"dumper",level:3}],d={toc:u};function m(e){var t=e.components,s=(0,o.Z)(e,i);return(0,r.kt)("wrapper",(0,a.Z)({},d,s,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"components"},"Components"),(0,r.kt)("p",null,"VAST uses the ",(0,r.kt)("a",{parentName:"p",href:"actor-model"},"actor model")," to structure the application logic into\nindividual components. Each component maps to an actor, which has a strongly\ntyped messaging interface that the compiler enforces. All actor components\nexecute concurrently, but control flow within a component is sequential. It's\npossible that a component uses other helper components internally to achieve\nmore concurrency."),(0,r.kt)("p",null,"In other words, a component is a microservice within the application. Most\ncomponents are multi-instance in that the runtime can spawn them multiple times\nfor horizontal scaling. Only a few components are singletons where at most one\ninstance can exist, e.g., because they guard access to an underlying resource."),(0,r.kt)("p",null,"The diagram below illustrates VAST's key components in the dataflow between\nthem:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Components",src:n(46252).Z+"#gh-light-mode-only",width:"2730",height:"2026"}),"\n",(0,r.kt)("img",{alt:"Components",src:n(94747).Z+"#gh-dark-mode-only",width:"2730",height:"2026"})),(0,r.kt)("p",null,"By convention, we use ALL-CAPS naming for actor components and represent them as\ncircles. Red circles are singletons and blue circles multi-instance actors. We\nalso did not show process boundaries in this diagram, as the actor model allows\nus to ",(0,r.kt)("a",{parentName:"p",href:"actor-model#flexible-distribution"},"draw them flexibly"),", based on the\nrequirements of the deployment environment."),(0,r.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"Work in Progress")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"The implementation lags behind above sketched architecture in a few places. We\ndescribe the desired state here to expose the dataflow dependecies more clearly.\nFor example, the query engine is not yet pluggable, LOADER and DUMPER are\nintegrated into SOURCE and SINK, dense indexes are not yet configurable, and\npartition building currently still takes place within the query engine."))),(0,r.kt)("h2",{id:"singleton-components"},"Singleton Components"),(0,r.kt)("p",null,"Singleton components have a special restriction in that VAST can spawn at most\none instance of them. This restriction exists because such a component mutates\nan underlying resource. To avoid data races in the presence of writes, wrapping\nthe resources behind an actor implicitly squentializes accesses, given that\nactors process one message at a time."),(0,r.kt)("h3",{id:"catalog"},"CATALOG"),(0,r.kt)("p",null,"The catalog is the central component that sits both paths, read and write. It\nhas the two key functions:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Partition Management"),": the catalog is the owner of ",(0,r.kt)("em",{parentName:"li"},"partitions"),", each of\nwhich consists of a concatenation of record batches encoded in a format\nsuitable for persistence, plus optional sparse and dense indexes. Other\ncomponents can add and remove partitions."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Query Entry Point"),": user queries arrive at the catalog, which returns a\nset of candidate partitions for each query by looking up partition metadata\nand, if available, performing lookups in sub-linear index structures (such\nas Bloom filters). The query result consists of a URI that points to the\npartition and a small amount of partition metadata. The catalog also forwards\na query to all active partitions to include data in partitions that\nare still under construction.")),(0,r.kt)("h3",{id:"scheduler"},"SCHEDULER"),(0,r.kt)("p",null,"The scheduler is the central component in the query engine that drives query\nexecution. Scheduling concerns the loading and evicting of in-memory partitions\nthat can answer queries concurrently, with the goal to achieve minimum partition\nthrashing."),(0,r.kt)("p",null,"Why does thrashing occur? Typical workloads in security analytics (especially\nwhen executing security content) exhibit a high rate of point queries. This\nresults in a large overlap of relevant partitions among a given set of queries.\nIn the most naive case of serial query execution, VAST would process all\npartitions sequentially, i.e., loading one from disk, run the query, evict it\nagain. If we have a total of P partitions and Q queries waiting in line to\nbe executed, we would perform P \u2a09 Q partition load and evict operations. In\npractice, each query only needs to access a subset of partitions. The catalog is\nthe component that determines the candidate set for a given query. For an\nincreasing number of queries, the overlap of partitions turns out to be large.\nThis is where scheduler benefit kicks in: by sorting the to-be-processed\npartitions by the number of queries outstanding queries that access them, we can\ncreate optimal I/O access patterns."),(0,r.kt)("h2",{id:"multi-instance-components"},"Multi-instance Components"),(0,r.kt)("p",null,"Multi-instance components exist at various place in the path of the data. They\noften operate stateless and implement pure (side-effect-free) functions. In case\nthey own state, there is no dependency to other state of the same instance. For\nexample, a component may operate on a single file, but the whole system operates\non many distributed files, each of which represented by a single instance."),(0,r.kt)("h3",{id:"loader"},"LOADER"),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"Not Yet Implemented")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"This component is not yet implemented. Until then, the ",(0,r.kt)("a",{parentName:"p",href:"#SOURCE"},"SOURCE"),"\nperforms both I/O and subsequent input parsing."))),(0,r.kt)("h3",{id:"source"},"SOURCE"),(0,r.kt)("p",null,"The source transforms a stream of framed bytes into Arrow record batches, and\nthen relays them to an active partition. A source actor wraps a pluggable\n",(0,r.kt)("em",{parentName:"p"},"reader")," for a given input format, e.g., JSON, CSV, or PCAP."),(0,r.kt)("h3",{id:"partition"},"PARTITION"),(0,r.kt)("p",null,"There two types of partitions, ",(0,r.kt)("em",{parentName:"p"},"active")," and ",(0,r.kt)("em",{parentName:"p"},"passive"),", that share the same actor\ninterface. The difference is that active partitions are mutable and in the\nprocess of being built, whereas passive partitions are immutable and only\nrespond to query operations."),(0,r.kt)("p",null,'The active partition takes as input a sequence of Arrow record batches until it\nis "full." There exists one partition instance per schema, so the stream of\nrecord batches gets demultiplexed over a set of actors. Each active partition\nkeeps writing record batches into its store until either a timeout fires or the\nstore reaches a configured size. The active partition then hands the ownership\nof the resulting partition the catalog and starts over with a new partition.'),(0,r.kt)("p",null,"In addition to translating the in-memory record batch representation into a\npersistent format, the active partition also builds indexes to accelerate\nqueries."),(0,r.kt)("h3",{id:"query"},"QUERY"),(0,r.kt)("p",null,'Every query a user submits has a corresponding query actor that tracks its\nexecution. The interface of the query actor allows for extracting results in a\npull-based fashion, e.g., users can ask "give me 100 more results".'),(0,r.kt)("h3",{id:"sink"},"SINK"),(0,r.kt)("p",null,"The sink transforms a stream of Arrow record batches into a sequence of bytes\nusing a pluggable ",(0,r.kt)("em",{parentName:"p"},"writer")," for a given output format, e.g., JSON, CSV, or PCAP."),(0,r.kt)("h3",{id:"dumper"},"DUMPER"),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"Not Yet Implemented")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"This component is not yet implemented. Until then, the ",(0,r.kt)("a",{parentName:"p",href:"#SINK"},"SINK"),"\nperforms both output formatting and subsequent I/O."))))}m.isMDXComponent=!0},94747:function(e,t,n){t.Z=n.p+"assets/images/components.dark-0e6ad7d4d296e5b9d1610f4a3f57ea62.png"},46252:function(e,t,n){t.Z=n.p+"assets/images/components.light-1fe3c88a90f783ccb9aee1b6a115d606.png"}}]);