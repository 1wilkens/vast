"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6244],{85162:(e,t,a)=>{a.d(t,{Z:()=>o});var n=a(67294),l=a(34334);const r="tabItem_Ymn6";function o(e){let{children:t,hidden:a,className:o}=e;return n.createElement("div",{role:"tabpanel",className:(0,l.Z)(r,o),hidden:a},t)}},65488:(e,t,a)=>{a.d(t,{Z:()=>d});var n=a(83117),l=a(67294),r=a(34334),o=a(72389),s=a(67392),i=a(7094),p=a(12466);const u="tabList__CuJ",c="tabItem_LNqP";function m(e){var t,a;const{lazy:o,block:m,defaultValue:d,values:h,groupId:y,className:v}=e,k=l.Children.map(e.children,(e=>{if((0,l.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),g=null!=h?h:k.map((e=>{let{props:{value:t,label:a,attributes:n}}=e;return{value:t,label:a,attributes:n}})),b=(0,s.l)(g,((e,t)=>e.value===t.value));if(b.length>0)throw new Error('Docusaurus error: Duplicate values "'+b.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const f=null===d?d:null!=(t=null!=d?d:null==(a=k.find((e=>e.props.default)))?void 0:a.props.value)?t:k[0].props.value;if(null!==f&&!g.some((e=>e.value===f)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+f+'" but none of its children has the corresponding value. Available values are: '+g.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:T,setTabGroupChoices:N}=(0,i.U)(),[w,x]=(0,l.useState)(f),P=[],{blockElementScrollPositionUntilNextRender:S}=(0,p.o5)();if(null!=y){const e=T[y];null!=e&&e!==w&&g.some((t=>t.value===e))&&x(e)}const A=e=>{const t=e.currentTarget,a=P.indexOf(t),n=g[a].value;n!==w&&(S(t),x(n),null!=y&&N(y,String(n)))},V=e=>{var t;let a=null;switch(e.key){case"ArrowRight":{var n;const t=P.indexOf(e.currentTarget)+1;a=null!=(n=P[t])?n:P[0];break}case"ArrowLeft":{var l;const t=P.indexOf(e.currentTarget)-1;a=null!=(l=P[t])?l:P[P.length-1];break}}null==(t=a)||t.focus()};return l.createElement("div",{className:(0,r.Z)("tabs-container",u)},l.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":m},v)},g.map((e=>{let{value:t,label:a,attributes:o}=e;return l.createElement("li",(0,n.Z)({role:"tab",tabIndex:w===t?0:-1,"aria-selected":w===t,key:t,ref:e=>P.push(e),onKeyDown:V,onFocus:A,onClick:A},o,{className:(0,r.Z)("tabs__item",c,null==o?void 0:o.className,{"tabs__item--active":w===t})}),null!=a?a:t)}))),o?(0,l.cloneElement)(k.filter((e=>e.props.value===w))[0],{className:"margin-top--md"}):l.createElement("div",{className:"margin-top--md"},k.map(((e,t)=>(0,l.cloneElement)(e,{key:t,hidden:e.props.value!==w})))))}function d(e){const t=(0,o.Z)();return l.createElement(m,(0,n.Z)({key:String(t)},e))}},9848:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>u,contentTitle:()=>i,default:()=>d,frontMatter:()=>s,metadata:()=>p,toc:()=>c});var n=a(83117),l=(a(67294),a(3905)),r=(a(61839),a(65488)),o=a(85162);const s={},i="Python",p={unversionedId:"use/integrate/python",id:"use/integrate/python",title:"Python",description:"VAST ships with Python bindings to enable interaction with VAST in the Python",source:"@site/docs/use/integrate/python.md",sourceDirName:"use/integrate",slug:"/use/integrate/python",permalink:"/docs/use/integrate/python",draft:!1,editUrl:"https://github.com/tenzir/vast/tree/master/web/docs/use/integrate/python.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Execute Sigma Rules",permalink:"/docs/use/detect/execute-sigma-rules"},next:{title:"Threat Bus",permalink:"/docs/use/integrate/threatbus/"}},u={},c=[{value:"Install the PyPI package",id:"install-the-pypi-package",level:2},{value:"Use PyVAST",id:"use-pyvast",level:2},{value:"Import a log file",id:"import-a-log-file",level:3},{value:"Run a query",id:"run-a-query",level:3},{value:"Use PyVAST as module",id:"use-pyvast-as-module",level:2}],m={toc:c};function d(e){let{components:t,...a}=e;return(0,l.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"python"},"Python"),(0,l.kt)("p",null,"VAST ships with Python bindings to enable interaction with VAST in the Python\necosystem. We distribute the bindings as ",(0,l.kt)("a",{parentName:"p",href:"https://pypi.org/project/pyvast/"},"PyPI\npackage")," called\n",(0,l.kt)("a",{parentName:"p",href:"https://github.com/tenzir/vast/tree/master/pyvast"},"PyVAST"),"."),(0,l.kt)("h2",{id:"install-the-pypi-package"},"Install the PyPI package"),(0,l.kt)("p",null,"Use ",(0,l.kt)("inlineCode",{parentName:"p"},"pip")," to install PyVAST:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"pip install pyvast\n")),(0,l.kt)("h2",{id:"use-pyvast"},"Use PyVAST"),(0,l.kt)("p",null,"PyVAST has a ",(0,l.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/asyncio.html"},"asyncio"),"-based\nwrapper around VAST's command line interface that uses fluent method chaining.\nPyVAST supports all VAST commands by passing arguments to the ",(0,l.kt)("inlineCode",{parentName:"p"},"vast")," exectuable."),(0,l.kt)("p",null,"Every command line invocation has an equivalent Python-native\ninvocation of chained (sub-)commands via the ",(0,l.kt)("inlineCode",{parentName:"p"},"."),"-notation. You can pass\narguments as via Python's ",(0,l.kt)("inlineCode",{parentName:"p"},"*args")," and parameters as ",(0,l.kt)("inlineCode",{parentName:"p"},"**kwargs"),". When you are\ndone chaining methods, finalize the command invocation with a call to ",(0,l.kt)("inlineCode",{parentName:"p"},".exec()"),"."),(0,l.kt)("p",null,"Here are two examples."),(0,l.kt)("h3",{id:"import-a-log-file"},"Import a log file"),(0,l.kt)(r.Z,{mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"Python",label:"Python",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},'proc = await vast.import_().zeek(read="/path/to/file").exec()\nstdout, stderr = await proc.communicate()\nprint(stdout)\n')),(0,l.kt)("p",null,"NB: since ",(0,l.kt)("inlineCode",{parentName:"p"},"import")," is a reserved keyword, we add ",(0,l.kt)("inlineCode",{parentName:"p"},"_")," as suffix.")),(0,l.kt)(o.Z,{value:"CLI",label:"CLI",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"vast import --read=/path/to/file zeek\n")))),(0,l.kt)("h3",{id:"run-a-query"},"Run a query"),(0,l.kt)(r.Z,{mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"Python",label:"Python",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},'proc = await vast.export(max_events=10).json("192.167.1.102").exec()\nstdout, stderr = await proc.communicate()\nprint(stdout)\n'))),(0,l.kt)(o.Z,{value:"CLI",label:"CLI",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"vast export --max-events=10 json 192.168.1.104\n")))),(0,l.kt)("h2",{id:"use-pyvast-as-module"},"Use PyVAST as module"),(0,l.kt)("p",null,"You can use PyVAST as Python module:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},"from pyvast import VAST\n")),(0,l.kt)("p",null,"Once imported, there are three optional keyword arguments to instruct PyVAST\nwith:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"binary")," (default: ",(0,l.kt)("inlineCode",{parentName:"p"},"vast"),"): the path to the VAST executable. In case the\nVAST binary is not in your ",(0,l.kt)("inlineCode",{parentName:"p"},"$PATH"),", set this to the actual path to the VAST\nbinary.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"endpoint")," (default: ",(0,l.kt)("inlineCode",{parentName:"p"},"localhost:42000"),"): the endpoint of the VAST node.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"logger")," (optional): a custom ",(0,l.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/logging.html#logger-objects"},"logging.logger")," object for your\napplication."))),(0,l.kt)("p",null,"The following example shows a minimalistic working example with all required\nimport statements."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},'#!/usr/bin/env python3\n\nimport asyncio\nfrom pyvast import VAST\n\nasync def example():\n  vast = VAST(binary="/opt/vast/bin/vast")\n  await vast.test_connection()\n\n  proc = await vast.export(max_events=10).json("192.168.1.103").exec()\n  stdout, stderr = await proc.communicate()\n  print(stdout)\n\nasyncio.run(example())\n')),(0,l.kt)("p",null,"The ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/tenzir/vast/tree/master/pyvast/example"},"PyVAST example directory")," illustrates another use case involving\nreading data via Arrow and running a continuous query."))}d.isMDXComponent=!0}}]);