"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9928],{26569:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>m,contentTitle:()=>o,default:()=>g,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var i=a(87462),n=(a(67294),a(3905));const r={title:"Richer Typing in Sigma",description:"Towards Native Sigma Rule Execution",authors:"mavam",date:new Date("2022-08-12T00:00:00.000Z"),tags:["sigma","regex","query-frontend"]},o=void 0,s={permalink:"/blog/richer-typing-in-sigma",source:"@site/blog/richer-typing-in-sigma/index.md",title:"Richer Typing in Sigma",description:"Towards Native Sigma Rule Execution",date:"2022-08-12T00:00:00.000Z",formattedDate:"August 12, 2022",tags:[{label:"sigma",permalink:"/blog/tags/sigma"},{label:"regex",permalink:"/blog/tags/regex"},{label:"query-frontend",permalink:"/blog/tags/query-frontend"}],readingTime:4.72,truncated:!0,authors:[{name:"Matthias Vallentin",title:"Co-Founder & CEO",url:"https://github.com/mavam",email:"matthias@tenzir.com",imageURL:"https://github.com/mavam.png",key:"mavam"}],frontMatter:{title:"Richer Typing in Sigma",description:"Towards Native Sigma Rule Execution",authors:"mavam",date:"2022-08-12T00:00:00.000Z",tags:["sigma","regex","query-frontend"]},prevItem:{title:"VAST v2.3",permalink:"/blog/vast-v2.3"},nextItem:{title:"VAST v2.2",permalink:"/blog/vast-v2.2"}},m={authorsImageUrls:[void 0]},p=[],l={toc:p};function g(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,i.Z)({},l,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"VAST's ",(0,n.kt)("a",{parentName:"p",href:"/docs/understand-vast/query-language/frontends/sigma"},"Sigma frontend"),"\nnow supports more modifiers. In the Sigma language, modifiers transform\npredicates in various ways, e.g., to apply a function over a value or to change\nthe operator of a predicate. Modifiers are the customization point to enhance\nexpressiveness of query operations."),(0,n.kt)("p",null,"The new ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/SigmaHQ/pySigma"},"pySigma")," effort, which will eventually replace the\nnow-considered-legacy ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/SigmaHQ/sigma"},"sigma")," project, comes with new modifiers as well.\nMost notably, ",(0,n.kt)("inlineCode",{parentName:"p"},"lt"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"lte"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"gt"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"gte")," provide comparisons over value domains\nwith a total ordering, e.g., numbers: ",(0,n.kt)("inlineCode",{parentName:"p"},"x >= 42"),". In addition, the ",(0,n.kt)("inlineCode",{parentName:"p"},"cidr"),"\nmodifier interprets a value as subnet, e.g., ",(0,n.kt)("inlineCode",{parentName:"p"},"10.0.0.0/8"),". Richer typing!"))}g.isMDXComponent=!0}}]);