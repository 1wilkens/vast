#!/usr/bin/env bash

# Input:
# - VASTCLOUD_REBUILD: set to any value to force docker rebuild
# - VASTCLOUD_NO_PTY: set to any value to force-disable PTY

# The CLI runs Docker commands from Docker, so it needs to have access to the
# Docker socket. The calling user id and group id as well as the docker group id
# are propagated to the image at build time. This enables the image to be runned
# using the host user, but a rebuild is required when changing the calling user.

# Allow running vast-cloud from another directory
ABSOLUTE_DIRNAME=$(dirname $(readlink -f  $0))
# Take the provided credentials file location into account
AWS_SHARED_CREDENTIALS_FILE="${AWS_SHARED_CREDENTIALS_FILE:=$HOME/.aws/credentials}"
# Allow binding from host to run vast-cloud within vast-cloud
export HOST_DIRNAME="${HOST_DIRNAME:=$ABSOLUTE_DIRNAME}"
export HOST_CREDENTIALS_FILE="${HOST_CREDENTIALS_FILE:=$AWS_SHARED_CREDENTIALS_FILE}"
export HOST_DOCKER_SOCKET="${HOST_DOCKER_SOCKET:=/var/run/docker.sock}"

export CALLER_UID=$(id -u)
export CALLER_GID=$(id -g)
export DOCKER_GID=$(stat -c '%g' ${HOST_DOCKER_SOCKET})

build () {
  echo "(CALLER_UID=$CALLER_UID,CALLER_GID=$CALLER_GID,DOCKER_GID=$DOCKER_GID)"
  docker build \
    -t tenzir/vast-cloud-cli \
    -f docker/cli.Dockerfile \
    --build-arg CALLER_UID \
    --build-arg CALLER_GID \
    --build-arg DOCKER_GID \
    . \
  || exit $? # call exit to fail CLI if build fails
}

# if image exists and VASTCLOUD_REBUILD not set, don't rebuild
docker image inspect tenzir/vast-cloud-cli > /dev/null \
    && [[ -z $VASTCLOUD_REBUILD ]] \
    || build

# Run image with both AWS credentials file and env credentials if available
# First argument passed to docker as flags
# Second argument passed to the container as command arguments
run () {
  docker run -i \
    $(echo "$1") \
    --mount type=bind,source=$HOST_DOCKER_SOCKET,target=/var/run/docker.sock \
    --mount type=bind,source=$HOST_DIRNAME/../..,target=/vast \
    $([[ -f "$AWS_SHARED_CREDENTIALS_FILE" ]] && echo "--mount type=bind,source=$HOST_CREDENTIALS_FILE,target=/.aws/credentials,readonly") \
    --mount source=vastcloud-cli-persistant-configs,target=/etc/persistant-configs \
    -e AWS_PROFILE \
    -e AWS_SHARED_CREDENTIALS_FILE=/.aws/credentials \
    -e AWS_ACCESS_KEY_ID \
    -e AWS_SECRET_ACCESS_KEY \
    -e VASTCLOUD_NO_PTY \
    --env-file <(env | grep VAST_) \
    --env-file <(env | grep TF_) \
    --env-file <(env | grep HOST_) \
    --rm \
    tenzir/vast-cloud-cli "${@:2}"
}

# Use the VASTCLOUD_CHECK_PTY to execute the command in a dry run mode that
# checks whether the docker PTY flag if required
PTY_CHECK_RESULT=$(run '-e VASTCLOUD_CHECK_PTY=1' "$@")
[[ $? == 0 ]] || exit 1
# if one task needs a PTY, the whole command needs one
PTY_FLAG=$([[ $PTY_CHECK_RESULT =~ "1" ]] && echo "-t")

# The command is then executed with the resulting PTY_FLAG
run "$PTY_FLAG" "$@"
